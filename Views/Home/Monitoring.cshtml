@{
    ViewData["Title"] = "Real-time Monitoring";
    var deviceId = ViewBag.DeviceId as string;
}

<div class="row">
    <div class="col-12">
        <h1><i class="fas fa-chart-line"></i> Real-time Monitoring - @deviceId</h1>
        <div class="d-flex justify-content-between align-items-center mb-3">
            <a href="/" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> Back to Overview
            </a>
            
            <!-- Display Mode Toggle -->
            <div class="btn-group" role="group" aria-label="Display mode">
                <input type="radio" class="btn-check" name="displayMode" id="chartMode" autocomplete="off" checked>
                <label class="btn btn-outline-primary" for="chartMode">
                    <i class="fas fa-chart-line"></i> Chart View
                </label>
                
                <input type="radio" class="btn-check" name="displayMode" id="tableMode" autocomplete="off">
                <label class="btn btn-outline-primary" for="tableMode">
                    <i class="fas fa-table"></i> Table View
                </label>
                
                <input type="radio" class="btn-check" name="displayMode" id="mixedMode" autocomplete="off">
                <label class="btn btn-outline-primary" for="mixedMode">
                    <i class="fas fa-th"></i> Mixed View
                </label>
            </div>
        </div>
        
        <!-- Connection Status -->
        <div class="alert alert-info d-flex align-items-center" id="connectionStatus">
            <div class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></div>
            <span>Connecting to real-time data...</span>
        </div>
    </div>
</div>

<!-- Chart View -->
<div id="chartView" class="view-content">
    <div class="row mb-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6>Chart Controls</h6>
                        <div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="showVoltage" checked>
                                <label class="form-check-label" for="showVoltage">Voltage</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="showCurrent" checked>
                                <label class="form-check-label" for="showCurrent">Current</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="showPower">
                                <label class="form-check-label" for="showPower">Power</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-lg-8">
            <div id="voltageChartContainer" class="card mb-4">
                <div class="card-header">
                    <h5>Channel Voltages</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="voltageChart"></canvas>
                    </div>
                </div>
            </div>
            
            <div id="currentChartContainer" class="card mb-4">
                <div class="card-header">
                    <h5>Channel Currents</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="currentChart"></canvas>
                    </div>
                </div>
            </div>
            
            <div id="powerChartContainer" class="card mb-4" style="display: none;">
                <div class="card-header">
                    <h5>Channel Power</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="powerChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-4">
            <div class="card mb-3">
                <div class="card-header">
                    <h6>Active Channels</h6>
                </div>
                <div class="card-body" id="channelStatus" style="max-height: 400px; overflow-y: auto;">
                    <p class="text-muted">Loading...</p>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <h6>Alarms</h6>
                </div>
                <div class="card-body" id="alarmsList" style="max-height: 300px; overflow-y: auto;">
                    <p class="text-muted">No alarms</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Table View -->
<div id="tableView" class="view-content" style="display: none;">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Channel Data Table</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive" style="max-height: 600px; overflow-y: auto;">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark sticky-top">
                                <tr>
                                    <th>Ch#</th>
                                    <th>Status</th>
                                    <th>Mode</th>
                                    <th>Voltage</th>
                                    <th>Current</th>
                                    <th>Power</th>
                                    <th>Capacity</th>
                                    <th>Temp</th>
                                    <th>Cycle</th>
                                    <th>Step</th>
                                </tr>
                            </thead>
                            <tbody id="channelTableBody">
                                <tr><td colspan="10" class="text-center text-muted">Loading...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Mixed View -->
<div id="mixedView" class="view-content" style="display: none;">
    <div class="row">
        <div class="col-lg-6">
            <div class="card mb-3">
                <div class="card-header">
                    <h6>Voltage Trend</h6>
                </div>
                <div class="card-body">
                    <div style="height: 200px;">
                        <canvas id="mixedVoltageChart"></canvas>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <h6>Current Trend</h6>
                </div>
                <div class="card-body">
                    <div style="height: 200px;">
                        <canvas id="mixedCurrentChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    <h6>Channel Grid</h6>
                </div>
                <div class="card-body" style="max-height: 500px; overflow-y: auto;">
                    <div class="row" id="channelGrid">
                        <div class="col-12">
                            <p class="text-muted text-center">Loading...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    const deviceId = '@deviceId';
    let voltageChart, currentChart, powerChart;
    let mixedVoltageChart, mixedCurrentChart;
    let voltageData = { labels: [], datasets: [] };
    let currentData = { labels: [], datasets: [] };
    let powerData = { labels: [], datasets: [] };
    let displayMode = 'chart';
    let connection;
    let isConnected = false;
    
    function updateConnectionStatus(connected, message) {
        isConnected = connected;
        
        // 전역 연결 상태 업데이트
        window.globalConnectionStatus.updateIndicator(connected);
        
        const statusElement = document.getElementById('connectionStatus');
        if (statusElement) {
            if (connected) {
                statusElement.className = 'alert alert-success d-flex align-items-center';
                statusElement.innerHTML = `
                    <i class="fas fa-check-circle me-2"></i>
                    <span>${message}</span>
                `;
            } else {
                statusElement.className = 'alert alert-danger d-flex align-items-center';
                statusElement.innerHTML = `
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <span>${message}</span>
                `;
            }
        }
    }
    
    // Display mode switching
    document.querySelectorAll('input[name="displayMode"]').forEach(radio => {
        radio.addEventListener('change', function() {
            displayMode = this.id.replace('Mode', '');
            switchDisplayMode(displayMode);
        });
    });
    
    function switchDisplayMode(mode) {
        document.querySelectorAll('.view-content').forEach(view => {
            view.style.display = 'none';
        });
        
        const targetView = document.getElementById(`${mode}View`);
        if (targetView) {
            targetView.style.display = 'block';
        }
        
        // Initialize charts for the selected view if not already done
        if (mode === 'mixed' && !mixedVoltageChart) {
            initMixedCharts();
        }
    }
    
    // Chart visibility toggles
    document.getElementById('showVoltage').addEventListener('change', function() {
        document.getElementById('voltageChartContainer').style.display = this.checked ? 'block' : 'none';
    });
    
    document.getElementById('showCurrent').addEventListener('change', function() {
        document.getElementById('currentChartContainer').style.display = this.checked ? 'block' : 'none';
    });
    
    document.getElementById('showPower').addEventListener('change', function() {
        document.getElementById('powerChartContainer').style.display = this.checked ? 'block' : 'none';
    });
    
    // Initialize main charts
    function initCharts() {
        // Chart.js가 로드되었는지 확인
        if (typeof Chart === 'undefined') {
            console.error('Chart.js is not loaded!');
            setTimeout(initCharts, 1000); // 1초 후 재시도
            return;
        }
        
        console.log('Initializing charts...');
        
        const ctx1 = document.getElementById('voltageChart').getContext('2d');
        voltageChart = new Chart(ctx1, {
            type: 'line',
            data: voltageData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                scales: {
                    y: {
                        beginAtZero: false,
                        title: { display: true, text: 'Voltage (V)' }
                    },
                    x: {
                        title: { display: true, text: 'Time' }
                    }
                },
                plugins: {
                    title: { display: true, text: 'Channel Voltages' },
                    legend: { 
                        display: true,
                        position: 'top',
                        maxHeight: 100
                    }
                },
                elements: {
                    point: { radius: 2 }
                }
            }
        });
        
        const ctx2 = document.getElementById('currentChart').getContext('2d');
        currentChart = new Chart(ctx2, {
            type: 'line',
            data: currentData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                scales: {
                    y: {
                        title: { display: true, text: 'Current (A)' }
                    },
                    x: {
                        title: { display: true, text: 'Time' }
                    }
                },
                plugins: {
                    title: { display: true, text: 'Channel Currents' },
                    legend: { 
                        display: true,
                        position: 'top',
                        maxHeight: 100
                    }
                },
                elements: {
                    point: { radius: 2 }
                }
            }
        });
        
        const ctx3 = document.getElementById('powerChart').getContext('2d');
        powerChart = new Chart(ctx3, {
            type: 'line',
            data: powerData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                scales: {
                    y: {
                        title: { display: true, text: 'Power (W)' }
                    },
                    x: {
                        title: { display: true, text: 'Time' }
                    }
                },
                plugins: {
                    title: { display: true, text: 'Channel Power' },
                    legend: { 
                        display: true,
                        position: 'top',
                        maxHeight: 100
                    }
                },
                elements: {
                    point: { radius: 2 }
                }
            }
        });
    }
    
    function initMixedCharts() {
        // Chart.js가 로드되었는지 확인
        if (typeof Chart === 'undefined') {
            console.error('Chart.js is not loaded for mixed charts!');
            return;
        }
        
        console.log('Initializing mixed charts...');
        
        const ctx1 = document.getElementById('mixedVoltageChart').getContext('2d');
        mixedVoltageChart = new Chart(ctx1, {
            type: 'line',
            data: JSON.parse(JSON.stringify(voltageData)), // Deep copy
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: { beginAtZero: false },
                    x: { display: false }
                },
                plugins: {
                    legend: { display: false }
                },
                elements: {
                    point: { radius: 1 }
                }
            }
        });
        
        const ctx2 = document.getElementById('mixedCurrentChart').getContext('2d');
        mixedCurrentChart = new Chart(ctx2, {
            type: 'line',
            data: JSON.parse(JSON.stringify(currentData)), // Deep copy
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: { beginAtZero: false },
                    x: { display: false }
                },
                plugins: {
                    legend: { display: false }
                },
                elements: {
                    point: { radius: 1 }
                }
            }
        });
    }
    
    // SignalR connection
    function initSignalR() {
        connection = new signalR.HubConnectionBuilder()
            .withUrl("/deviceHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start().then(function () {
            console.log("✅ SignalR Connected for monitoring");
            return connection.invoke("JoinDeviceGroup", deviceId);
        }).then(function() {
            console.log("✅ Joined device group for monitoring:", deviceId);
            updateConnectionStatus(true, "Connected to real-time monitoring");
            connection.invoke("RequestLatestData", deviceId);
        }).catch(function (err) {
            console.error("❌ SignalR connection failed:", err);
            updateConnectionStatus(false, "Failed to connect: " + err.toString());
            setTimeout(initSignalR, 3000);
        });

        connection.on("ReceiveDeviceData", function (deviceData) {
            console.log("📦 Received device data for monitoring", deviceData);
            const channels = deviceData.channels || deviceData.Channels || [];
            updateCharts(deviceData);
            updateChannelStatus(channels);
            updateChannelTable(channels);
            updateChannelGrid(channels);
            const alarms = deviceData.alarmData || deviceData.AlarmData || [];
            updateAlarms(alarms);
        });

        connection.onclose(function(error) {
            console.log("🔴 SignalR connection closed", error);
            updateConnectionStatus(false, "Connection lost. Attempting to reconnect...");
            setTimeout(initSignalR, 3000);
        });
    }
    
    function updateCharts(deviceData) {
        const timestamp = new Date(deviceData.timestamp).toLocaleTimeString();
        const channels = deviceData.channels || deviceData.Channels || [];
        
        // Update data arrays - keep last 50 points
        [voltageData, currentData, powerData].forEach(data => {
            if (data.labels.length > 50) {
                data.labels = data.labels.slice(-49);
                data.datasets.forEach(dataset => {
                    dataset.data = dataset.data.slice(-49);
                });
            }
            data.labels.push(timestamp);
        });
        
        channels.forEach((channel, index) => {
            const channelNumber = channel.channelNumber || channel.ChannelNumber || index;
            const voltage = channel.voltage || channel.Voltage || 0;
            const current = channel.current || channel.Current || 0;
            const power = channel.power || channel.Power || 0;
            
            // Generate color for each channel
            const color = `hsl(${(channelNumber * 137.5) % 360}, 70%, 50%)`;
            
            // Voltage data
            if (!voltageData.datasets[index]) {
                voltageData.datasets[index] = {
                    label: `Ch ${channelNumber}`,
                    data: [],
                    borderColor: color,
                    backgroundColor: color + '20',
                    fill: false,
                    borderWidth: 2
                };
            }
            voltageData.datasets[index].data.push(voltage);
            
            // Current data
            if (!currentData.datasets[index]) {
                currentData.datasets[index] = {
                    label: `Ch ${channelNumber}`,
                    data: [],
                    borderColor: color,
                    backgroundColor: color + '20',
                    fill: false,
                    borderWidth: 2
                };
            }
            currentData.datasets[index].data.push(current);
            
            // Power data
            if (!powerData.datasets[index]) {
                powerData.datasets[index] = {
                    label: `Ch ${channelNumber}`,
                    data: [],
                    borderColor: color,
                    backgroundColor: color + '20',
                    fill: false,
                    borderWidth: 2
                };
            }
            powerData.datasets[index].data.push(power);
        });
        
        // Update charts
        if (voltageChart) voltageChart.update('none');
        if (currentChart) currentChart.update('none');
        if (powerChart) powerChart.update('none');
        if (mixedVoltageChart) {
            mixedVoltageChart.data = JSON.parse(JSON.stringify(voltageData));
            mixedVoltageChart.update('none');
        }
        if (mixedCurrentChart) {
            mixedCurrentChart.data = JSON.parse(JSON.stringify(currentData));
            mixedCurrentChart.update('none');
        }
    }
    
    function updateChannelStatus(channels) {
        const statusHtml = channels.map(ch => {
            const channelNumber = ch.channelNumber || ch.ChannelNumber || 'N/A';
            const rawStatus = ch.status !== undefined ? ch.status : (ch.Status !== undefined ? ch.Status : 0);
            const voltage = ch.voltage || ch.Voltage || 0;
            const current = ch.current || ch.Current || 0;
            const power = ch.power || ch.Power || 0;
            const status = getStatusText(rawStatus);
            const statusClass = getStatusClass(status);
            
            return `
                <div class="mb-2 p-2 border rounded">
                    <div class="d-flex justify-content-between align-items-center mb-1">
                        <strong>Ch ${channelNumber}</strong>
                        <span class="badge ${statusClass}">${status}</span>
                    </div>
                    <div class="row text-center">
                        <div class="col-4">
                            <div class="data-value">${parseFloat(voltage).toFixed(3)}</div>
                            <small class="text-muted">V</small>
                        </div>
                        <div class="col-4">
                            <div class="data-value">${parseFloat(current).toFixed(3)}</div>
                            <small class="text-muted">A</small>
                        </div>
                        <div class="col-4">
                            <div class="data-value">${parseFloat(power).toFixed(2)}</div>
                            <small class="text-muted">W</small>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
        document.getElementById('channelStatus').innerHTML = statusHtml || '<p class="text-muted">No channels</p>';
    }
    
    function updateChannelTable(channels) {
        const tbody = document.getElementById('channelTableBody');
        if (!tbody) return;
        
        const html = channels.map(ch => {
            const channelNumber = ch.channelNumber || ch.ChannelNumber || 'N/A';
            const rawStatus = ch.status !== undefined ? ch.status : (ch.Status !== undefined ? ch.Status : 0);
            const rawMode = ch.mode !== undefined ? ch.mode : (ch.Mode !== undefined ? ch.Mode : 0);
            const voltage = ch.voltage || ch.Voltage || 0;
            const current = ch.current || ch.Current || 0;
            const power = ch.power || ch.Power || 0;
            const capacity = ch.capacity || ch.Capacity || 0;
            const temperature = ch.chamberTemperature || ch.ChamberTemperature || 0;
            const cycleNo = ch.cycleNo || ch.CycleNo || 0;
            const stepNo = ch.stepNo || ch.StepNo || 0;
            
            const status = getStatusText(rawStatus);
            const mode = getModeText(rawMode);
            const statusClass = getStatusClass(status);
            
            return `
                <tr>
                    <td><strong>${channelNumber}</strong></td>
                    <td><span class="badge ${statusClass}">${status}</span></td>
                    <td><span class="badge bg-secondary">${mode}</span></td>
                    <td class="data-value">${parseFloat(voltage).toFixed(3)}</td>
                    <td class="data-value">${parseFloat(current).toFixed(3)}</td>
                    <td class="data-value">${parseFloat(power).toFixed(2)}</td>
                    <td class="data-value">${parseFloat(capacity).toFixed(2)}</td>
                    <td class="data-value">${parseFloat(temperature).toFixed(1)}</td>
                    <td class="data-value">${cycleNo}</td>
                    <td class="data-value">${stepNo}</td>
                </tr>
            `;
        }).join('');
        
        tbody.innerHTML = html || '<tr><td colspan="10" class="text-center text-muted">No channel data</td></tr>';
    }
    
    function updateChannelGrid(channels) {
        const grid = document.getElementById('channelGrid');
        if (!grid) return;
        
        const html = channels.map(ch => {
            const channelNumber = ch.channelNumber || ch.ChannelNumber || 'N/A';
            const rawStatus = ch.status !== undefined ? ch.status : (ch.Status !== undefined ? ch.Status : 0);
            const rawMode = ch.mode !== undefined ? ch.mode : (ch.Mode !== undefined ? ch.Mode : 0);
            const voltage = ch.voltage || ch.Voltage || 0;
            const current = ch.current || ch.Current || 0;
            const power = ch.power || ch.Power || 0;
            const capacity = ch.capacity || ch.Capacity || 0;
            const temperature = ch.chamberTemperature || ch.ChamberTemperature || 0;
            const stepNo = ch.stepNo || ch.StepNo || 0;
            
            const status = getStatusText(rawStatus);
            const mode = getModeText(rawMode);
            const statusColor = getStatusColor(status);
            
            return `
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card h-100">
                        <div class="card-header bg-${statusColor}">
                            <h6 class="mb-0 text-white">Channel ${channelNumber}</h6>
                        </div>
                        <div class="card-body">
                            <div class="row text-center">
                                <div class="col-4">
                                    <div class="data-value">${parseFloat(voltage).toFixed(2)}</div>
                                    <small class="text-muted">V</small>
                                </div>
                                <div class="col-4">
                                    <div class="data-value">${parseFloat(current).toFixed(2)}</div>
                                    <small class="text-muted">A</small>
                                </div>
                                <div class="col-4">
                                    <div class="data-value">${parseFloat(power).toFixed(1)}</div>
                                    <small class="text-muted">W</small>
                                </div>
                            </div>
                            <hr>
                            <div class="small">
                                <div class="d-flex justify-content-between">
                                    <span>Capacity:</span>
                                    <span class="data-value">${parseFloat(capacity).toFixed(2)} Ah</span>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <span>Temp:</span>
                                    <span class="data-value">${parseFloat(temperature).toFixed(1)} °C</span>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <small>
                                <span class="badge bg-secondary">${mode}</span>
                                <span class="text-muted">Step ${stepNo}</span>
                            </small>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
        grid.innerHTML = html;
    }
    
    function updateAlarms(alarms) {
        if (!alarms || alarms.length === 0) {
            document.getElementById('alarmsList').innerHTML = '<p class="text-muted">No alarms</p>';
            return;
        }
        
        const alarmsHtml = alarms.map(alarm => {
            const name = alarm.name || alarm.Name || 'Unknown Alarm';
            const description = alarm.description || alarm.Description || 'No description';
            const severity = alarm.severity || alarm.Severity || 'info';
            const timestamp = alarm.timestamp || alarm.Timestamp || new Date().toISOString();
            
            return `
                <div class="alert alert-sm alarm-${severity.toString().toLowerCase()}" role="alert">
                    <strong>${name}</strong><br>
                    <small>${description}</small>
                    <div class="small text-muted">${new Date(timestamp).toLocaleTimeString()}</div>
                </div>
            `;
        }).join('');
        
        document.getElementById('alarmsList').innerHTML = alarmsHtml;
    }
    
    // Utility functions (공통 함수 사용)
    function getStatusText(statusValue) {
        return window.commonFunctions.getStatusText(statusValue);
    }
    
    function getModeText(modeValue) {
        return window.commonFunctions.getModeText(modeValue);
    }
    
    function getStatusClass(status) {
        return window.commonFunctions.getStatusClass(status);
    }
    
    function getStatusColor(status) {
        return window.commonFunctions.getStatusColor(status);
    }
    
    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
        console.log("🚀 Monitoring page loaded, initializing...");
        
        // 필수 라이브러리 확인
        if (typeof Chart === 'undefined') {
            console.error('❌ Chart.js is not available! Please check if the library is loaded.');
            updateConnectionStatus(false, "Chart.js library not loaded");
            return;
        }
        
        if (typeof signalR === 'undefined') {
            console.error('❌ SignalR is not available! Please check if the library is loaded.');
            updateConnectionStatus(false, "SignalR library not loaded");
            return;
        }
        
        console.log('✅ All libraries loaded successfully');
        console.log('Chart.js version:', Chart.version);
        
        // 전역 연결 상태 업데이트
        window.globalConnectionStatus.updateIndicator(false);
        
        // SignalR 초기화
        initSignalR();
        
        // 차트 초기화 (약간의 지연을 두고)
        setTimeout(() => {
            initCharts();
            console.log('✅ Charts initialized successfully');
        }, 200);
    });
    
    // Update every 500ms for real-time feel
    setInterval(() => {
        if (isConnected && connection) {
            connection.invoke("RequestLatestData", deviceId);
        }
    }, 500);
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', function() {
        if (connection && isConnected) {
            connection.invoke("LeaveDeviceGroup", deviceId);
        }
    });
</script>
}