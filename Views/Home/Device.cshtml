@model GPIMSWebServer.Models.DeviceData
@{
    ViewData["Title"] = "Device Details";
    var deviceId = ViewBag.DeviceId as string;
}

<div class="row">
    <div class="col-12">
        <h1><i class="fas fa-microchip"></i> Device Details - @deviceId</h1>
        <div class="d-flex justify-content-between align-items-center mb-3">
            <a href="/" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> Back to Overview
            </a>
            <div>
                <button id="manualRefreshBtn" class="btn btn-secondary me-2">
                    <i class="fas fa-sync-alt"></i> Manual Refresh
                </button>
                <a href="/Home/Channels/@deviceId" class="btn btn-info me-2">
                    <i class="fas fa-battery-three-quarters"></i> Channel Overview
                </a>
                <a href="/Home/Monitoring/@deviceId" class="btn btn-primary">
                    <i class="fas fa-chart-line"></i> Real-time Monitoring
                </a>
            </div>
        </div>
        
        <!-- Debug Status -->
        <div class="alert alert-info" id="debugStatus">
            <strong>Debug:</strong> <span id="debugText">Initializing...</span>
        </div>
        
        <!-- Connection Status -->
        <div class="alert alert-info d-flex align-items-center" id="connectionStatus">
            <div class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></div>
            <span>Connecting to real-time data...</span>
        </div>
    </div>
</div>

<div id="deviceContent">
    @if (Model != null)
    {
        <div class="row">
            <!-- Channel Data -->
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5><i class="fas fa-battery-three-quarters"></i> Channel Data (<span id="channelCount">@Model.Channels.Count</span> channels)</h5>
                        <div>
                            <small class="text-muted">Last update: <span id="lastUpdateTime">@Model.Timestamp.ToString("HH:mm:ss")</span></small>
                            <span class="badge bg-secondary ms-2" id="updateCounter">0 updates</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Ch#</th>
                                        <th>Status</th>
                                        <th>Mode</th>
                                        <th>Voltage</th>
                                        <th>Current</th>
                                        <th>Power</th>
                                        <th>Capacity</th>
                                        <th>Temp</th>
                                    </tr>
                                </thead>
                                <tbody id="channelTableBody">
                                    @foreach (var channel in Model.Channels.Take(20))
                                    {
                                        <tr data-channel="@channel.ChannelNumber">
                                            <td><strong>@channel.ChannelNumber</strong></td>
                                            <td><span class="badge status-@channel.Status.ToString().ToLower()">@channel.Status</span></td>
                                            <td><span class="badge bg-secondary">@channel.Mode</span></td>
                                            <td class="data-value">@channel.Voltage.ToString("F3") V</td>
                                            <td class="data-value">@channel.Current.ToString("F3") A</td>
                                            <td class="data-value">@channel.Power.ToString("F2") W</td>
                                            <td class="data-value">@channel.Capacity.ToString("F2") Ah</td>
                                            <td class="data-value">@channel.ChamberTemperature.ToString("F1") Â°C</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div id="channelCountInfo">
                            @if (Model.Channels.Count > 20)
                            {
                                <p class="text-muted">Showing first 20 channels of @Model.Channels.Count total channels.</p>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Device Info -->
            <div class="col-lg-4">
                <div class="card mb-3">
                    <div class="card-header">
                        <h6><i class="fas fa-info-circle"></i> Device Summary</h6>
                    </div>
                    <div class="card-body" id="deviceSummary">
                        <div class="row text-center">
                            <div class="col-6">
                                <div class="border-end">
                                    <div class="fs-4 fw-bold text-primary" id="activeChannelsCount">
                                        @Model.Channels.Count(c => c.Status != GPIMSWebServer.Models.ChannelStatus.Idle)
                                    </div>
                                    <small class="text-muted">Active Channels</small>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="fs-4 fw-bold text-success" id="totalPower">
                                    @Model.Channels.Sum(c => c.Power).ToString("F1")
                                </div>
                                <small class="text-muted">Total Power (W)</small>
                            </div>
                        </div>
                        <hr>
                        <div class="small">
                            <div class="d-flex justify-content-between">
                                <span>Device ID:</span>
                                <span class="fw-bold">@Model.DeviceId</span>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span>CAN Data Points:</span>
                                <span class="fw-bold" id="canDataCount">@Model.CANData.Count</span>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span>LIN Data Points:</span>
                                <span class="fw-bold" id="linDataCount">@Model.LINData.Count</span>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span>Aux Sensors:</span>
                                <span class="fw-bold" id="auxDataCount">@Model.AuxData.Count</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Auxiliary Data -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h6><i class="fas fa-thermometer-half"></i> Auxiliary Data</h6>
                    </div>
                    <div class="card-body" id="auxDataContent">
                        @if (Model.AuxData.Any())
                        {
                            @foreach (var aux in Model.AuxData.Take(10))
                            {
                                <div class="mb-2">
                                    <div class="d-flex justify-content-between">
                                        <strong class="small">@aux.SensorName</strong>
                                        <span class="data-value">@aux.Value.ToString("F2")</span>
                                    </div>
                                    <div class="small text-muted">
                                        Range: @aux.SafeLowerLimit.ToString("F1") - @aux.SafeUpperLimit.ToString("F1")
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">No auxiliary data</p>
                        }
                    </div>
                </div>

                <!-- Alarms -->
                <div class="card">
                    <div class="card-header">
                        <h6><i class="fas fa-exclamation-triangle"></i> Active Alarms</h6>
                    </div>
                    <div class="card-body" id="alarmsContent">
                        @if (Model.AlarmData.Any())
                        {
                            @foreach (var alarm in Model.AlarmData)
                            {
                                <div class="alert alert-sm alarm-@alarm.Severity.ToString().ToLower()" role="alert">
                                    <strong>@alarm.Name</strong><br>
                                    <small>@alarm.Description</small>
                                    <div class="small text-muted">@alarm.Timestamp.ToString("HH:mm:ss")</div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">No active alarms</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle"></i> No data available for device @deviceId
        </div>
    }
</div>

<style>
@* .data-fresh {
    animation: pulse-green 1s ease-in-out;
}

@@keyframes pulse-green {
    0% { background-color: rgba(40, 167, 69, 0.2); }
    100% { background-color: transparent; }
} *@

@* .updated-row {
    background-color: rgba(40, 167, 69, 0.1);
    transition: background-color 0.3s ease;
} *@
</style>

@section Scripts {
<script>
    const deviceId = '@deviceId';
    let isConnected = false;
    let updateCount = 0;
    let connection;
    
    function updateDebugStatus(message) {
        console.log('[DEBUG]', message);
        const debugElement = document.getElementById('debugText');
        if (debugElement) {
            debugElement.textContent = `${new Date().toLocaleTimeString()} - ${message}`;
        }
    }

    function initSignalR() {
        updateDebugStatus('Initializing SignalR connection...');
        
        connection = new signalR.HubConnectionBuilder()
            .withUrl("/deviceHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start().then(function () {
            console.log("â SignalR Connected");
            updateDebugStatus('SignalR connected successfully');
            
            return connection.invoke("JoinDeviceGroup", deviceId);
        }).then(function() {
            console.log("â Joined device group:", deviceId);
            updateDebugStatus('Joined device group: ' + deviceId);
            updateConnectionStatus(true, "Connected to real-time data");
        }).catch(function (err) {
            console.error("â SignalR connection failed:", err);
            updateDebugStatus('Connection failed: ' + err.toString());
            updateConnectionStatus(false, "Failed to connect: " + err.toString());
        });

        connection.on("ReceiveDeviceData", function (deviceData) {
            console.log("ð¦ Received device data for update #" + (updateCount + 1), deviceData);
            updateCount++;
            updateDebugStatus(`Received update #${updateCount}`);
            
            // ê°ì ë¡ UI ìë°ì´í¸
            forceUpdateUI(deviceData);
        });

        connection.onclose(function(error) {
            console.log("ð´ SignalR connection closed", error);
            updateDebugStatus('Connection lost');
            updateConnectionStatus(false, "Connection lost. Attempting to reconnect...");
            
            setTimeout(function() {
                initSignalR();
            }, 3000);
        });
    }

    function updateConnectionStatus(connected, message) {
        isConnected = connected;
        const statusElement = document.getElementById('connectionStatus');
        
        if (connected) {
            statusElement.className = 'alert alert-success d-flex align-items-center';
            statusElement.innerHTML = `
                <i class="fas fa-check-circle me-2"></i>
                <span>${message}</span>
            `;
        } else {
            statusElement.className = 'alert alert-danger d-flex align-items-center';
            statusElement.innerHTML = `
                <i class="fas fa-exclamation-triangle me-2"></i>
                <span>${message}</span>
            `;
        }
    }

    function forceUpdateUI(deviceData) {
        console.log("ð Force updating UI with:", deviceData);
        
        try {
            // ìë°ì´í¸ ì¹´ì´í° íì
            const counterElement = document.getElementById('updateCounter');
            if (counterElement) {
                counterElement.textContent = `${updateCount} updates`;
                //counterElement.classList.add('data-fresh');
            }

            // ë§ì§ë§ ìë°ì´í¸ ìê°
            const lastUpdateElement = document.getElementById('lastUpdateTime');
            if (lastUpdateElement) {
                lastUpdateElement.textContent = new Date(deviceData.timestamp).toLocaleTimeString();
                //lastUpdateElement.classList.add('data-fresh');
            }

            // ì±ë ì ìë°ì´í¸
            const channelCountElement = document.getElementById('channelCount');
            if (channelCountElement) {
                const channels = deviceData.channels || deviceData.Channels || [];
                channelCountElement.textContent = channels.length;
                //channelCountElement.classList.add('data-fresh');
            }

            // íì´ë¸ ê°ì  ìë°ì´í¸
            const channels = deviceData.channels || deviceData.Channels || [];
            if (channels.length > 0) {
                forceUpdateChannelTable(channels);
            }

            // ëë°ì´ì¤ ìì½ ìë°ì´í¸
            forceUpdateSummary(deviceData);

            // ë³´ì¡° ë°ì´í° ìë°ì´í¸
            const auxData = deviceData.auxData || deviceData.AuxData || [];
            forceUpdateAuxData(auxData);

            // ìë ìë°ì´í¸
            const alarmData = deviceData.alarmData || deviceData.AlarmData || [];
            forceUpdateAlarms(alarmData);

            // ë°ì´í° ì¹´ì´í¸ ìë°ì´í¸
            forceUpdateDataCounts(deviceData);

            console.log("â UI force update completed");

        } catch (error) {
            console.error("â Error during UI update:", error);
            updateDebugStatus('UI update error: ' + error.message);
        }
    }

    // Enum ë³í í¨ìë¤
    function getStatusText(statusValue) {
        const statusMap = {
            0: 'Idle',
            1: 'Rest', 
            2: 'Discharge',
            3: 'Charge',
            4: 'Pause',
            5: 'Finish'
        };
        
        if (typeof statusValue === 'string') {
            return statusValue;
        }
        
        return statusMap[statusValue] || `Unknown(${statusValue})`;
    }
    
    function getModeText(modeValue) {
        const modeMap = {
            0: 'Rest',
            1: 'ChargeCC',
            2: 'ChargeCCCV', 
            3: 'ChargeCP',
            4: 'ChargeCPCV',
            5: 'DischargeCC',
            6: 'DischargeCCCV',
            7: 'DischargeCP',
            8: 'DischargeCPCV'
        };
        
        if (typeof modeValue === 'string') {
            return modeValue;
        }
        
        return modeMap[modeValue] || `Unknown(${modeValue})`;
    }

    function forceUpdateChannelTable(channels) {
        console.log("ð Force updating channel table with", channels.length, "channels");
        console.log("First channel data:", channels[0]); // ëë²ê¹ì©
        
        const tbody = document.getElementById('channelTableBody');
        if (!tbody) {
            console.error("â Channel table body not found!");
            return;
        }

        // ìì í ìë¡ ìì±
        const displayChannels = channels.slice(0, 20);
        let newHTML = '';
        
        displayChannels.forEach(function(channel) {
            // ìì í ìì± ì ê·¼
            const channelNumber = channel.channelNumber || channel.ChannelNumber || 'N/A';
            const rawStatus = channel.status !== undefined ? channel.status : (channel.Status !== undefined ? channel.Status : null);
            const rawMode = channel.mode !== undefined ? channel.mode : (channel.Mode !== undefined ? channel.Mode : null);
            const voltage = channel.voltage || channel.Voltage || 0;
            const current = channel.current || channel.Current || 0;
            const power = channel.power || channel.Power || 0;
            const capacity = channel.capacity || channel.Capacity || 0;
            const temperature = channel.chamberTemperature || channel.ChamberTemperature || 0;
            
            // Enum ê°ì íì¤í¸ë¡ ë³í
            const status = getStatusText(rawStatus);
            const mode = getModeText(rawMode);
            
            const statusClass = getStatusClass(status);
            
            console.log(`Channel ${channelNumber}: rawStatus=${rawStatus} -> status=${status}, rawMode=${rawMode} -> mode=${mode}`);
            
            newHTML += `
                <tr data-channel="${channelNumber}" class="updated-row">
                    <td><strong>${channelNumber}</strong></td>
                    <td><span class="badge ${statusClass}">${status}</span></td>
                    <td><span class="badge bg-secondary">${mode}</span></td>
                    <td class="data-value">${parseFloat(voltage).toFixed(3)} V</td>
                    <td class="data-value">${parseFloat(current).toFixed(3)} A</td>
                    <td class="data-value">${parseFloat(power).toFixed(2)} W</td>
                    <td class="data-value">${parseFloat(capacity).toFixed(2)} Ah</td>
                    <td class="data-value">${parseFloat(temperature).toFixed(1)} Â°C</td>
                </tr>
            `;
        });
        
        tbody.innerHTML = newHTML;
        
        // ì±ë ì ë³´ ìë°ì´í¸
        const countInfo = document.getElementById('channelCountInfo');
        if (countInfo) {
            if (channels.length > 20) {
                countInfo.innerHTML = `<p class="text-muted">Showing first 20 channels of ${channels.length} total channels.</p>`;
            } else {
                countInfo.innerHTML = '';
            }
        }

        console.log("â Channel table updated with", displayChannels.length, "rows");
    }

    function getStatusClass(status) {
        if (!status || typeof status !== 'string') {
            console.warn("Invalid status:", status);
            return 'status-unknown';
        }
        const statusLower = status.toString().toLowerCase();
        return `status-${statusLower}`;
    }

    function forceUpdateSummary(deviceData) {
        if (!deviceData.channels && !deviceData.Channels) return;

        const channels = deviceData.channels || deviceData.Channels || [];

        // íì± ì±ë ì (Idle = 0ì´ë¯ë¡ 0ì´ ìë ê²ë¤ ì¹´ì´í¸)
        const activeChannels = channels.filter(ch => {
            const rawStatus = ch.status !== undefined ? ch.status : (ch.Status !== undefined ? ch.Status : 0);
            return rawStatus !== 0; // Idleì´ ìë ê²ë¤
        }).length;
        
        const activeElement = document.getElementById('activeChannelsCount');
        if (activeElement) {
            activeElement.textContent = activeChannels;
            //activeElement.classList.add('data-fresh');
        }

        // ì´ ì ë ¥
        const totalPower = channels.reduce((sum, ch) => {
            const power = ch.power || ch.Power || 0;
            return sum + parseFloat(power);
        }, 0);
        
        const powerElement = document.getElementById('totalPower');
        if (powerElement) {
            powerElement.textContent = totalPower.toFixed(1);
            //powerElement.classList.add('data-fresh');
        }
    }

    function forceUpdateAuxData(auxData) {
        const container = document.getElementById('auxDataContent');
        if (!container) return;

        if (!auxData || auxData.length === 0) {
            container.innerHTML = '<p class="text-muted">No auxiliary data</p>';
            return;
        }

        let html = '';
        auxData.slice(0, 10).forEach(function(aux) {
            const sensorName = aux.sensorName || aux.SensorName || 'Unknown Sensor';
            const value = aux.value || aux.Value || 0;
            const safeLowerLimit = aux.safeLowerLimit || aux.SafeLowerLimit || 0;
            const safeUpperLimit = aux.safeUpperLimit || aux.SafeUpperLimit || 0;
            
            html += `
                <div class="mb-2 updated-row">
                    <div class="d-flex justify-content-between">
                        <strong class="small">${sensorName}</strong>
                        <span class="data-value">${parseFloat(value).toFixed(2)}</span>
                    </div>
                    <div class="small text-muted">
                        Range: ${parseFloat(safeLowerLimit).toFixed(1)} - ${parseFloat(safeUpperLimit).toFixed(1)}
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }

    function forceUpdateAlarms(alarmData) {
        const container = document.getElementById('alarmsContent');
        if (!container) return;

        if (!alarmData || alarmData.length === 0) {
            container.innerHTML = '<p class="text-muted">No active alarms</p>';
            return;
        }

        let html = '';
        alarmData.forEach(function(alarm) {
            const name = alarm.name || alarm.Name || 'Unknown Alarm';
            const description = alarm.description || alarm.Description || 'No description';
            const timestamp = alarm.timestamp || alarm.Timestamp || new Date().toISOString();
            const severity = alarm.severity || alarm.Severity || 'info';
            
            const severityClass = `alarm-${severity.toString().toLowerCase()}`;
            html += `
                <div class="alert alert-sm ${severityClass} updated-row" role="alert">
                    <strong>${name}</strong><br>
                    <small>${description}</small>
                    <div class="small text-muted">${new Date(timestamp).toLocaleTimeString()}</div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }

    function forceUpdateDataCounts(deviceData) {
        const canCount = document.getElementById('canDataCount');
        if (canCount) {
            const canData = deviceData.canData || deviceData.CANData || [];
            canCount.textContent = canData.length;
            //canCount.classList.add('data-fresh');
        }

        const linCount = document.getElementById('linDataCount');
        if (linCount) {
            const linData = deviceData.linData || deviceData.LINData || [];
            linCount.textContent = linData.length;
            //linCount.classList.add('data-fresh');
        }

        const auxCount = document.getElementById('auxDataCount');
        if (auxCount) {
            const auxData = deviceData.auxData || deviceData.AuxData || [];
            auxCount.textContent = auxData.length;
            //auxCount.classList.add('data-fresh');
        }
    }

    // ìë ìë¡ê³ ì¹¨ ë²í¼
    document.getElementById('manualRefreshBtn').addEventListener('click', function() {
        if (isConnected && connection) {
            console.log("ð Manual refresh requested");
            updateDebugStatus('Manual refresh requested');
            connection.invoke("RequestLatestData", deviceId);
        } else {
            console.log("â ï¸ Not connected, cannot refresh");
            updateDebugStatus('Cannot refresh - not connected');
        }
    });

    // ì ëë©ì´ì í´ëì¤ ì ê±°
    @* setInterval(function() {
        document.querySelectorAll('.data-fresh, .updated-row').forEach(function(element) {
            element.classList.remove('data-fresh', 'updated-row');
        });
    }, 2000); *@

    // ì´ê¸°í
    document.addEventListener('DOMContentLoaded', function() {
        console.log("ð Page loaded, initializing...");
        updateDebugStatus('Page loaded, starting connection...');
        initSignalR();
    });

    // íì´ì§ ì¸ë¡ë ì ì ë¦¬
    window.addEventListener('beforeunload', function() {
        if (connection && isConnected) {
            connection.invoke("LeaveDeviceGroup", deviceId);
        }
    });
</script>
}