@model GPIMSWebServer.Models.DeviceData
@{
    ViewData["Title"] = "Device Details";
    var deviceId = ViewBag.DeviceId as string;
}

<div class="row">
    <div class="col-12">
        <h1 class="fs-4"><i class="fas fa-microchip"></i> Device Details - @deviceId</h1>
        <div class="d-flex justify-content-between align-items-center mb-1">
            <!-- Connection Status -->
            <div class="alert alert-info d-flex align-items-center" id="connectionStatus">
                <div class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></div>
                <span>Connecting to real-time data...</span>
            </div>
            <div>
                <button id="manualRefreshBtn" class="btn btn-secondary me-2">
                    <i class="fas fa-sync-alt"></i> Manual Refresh
                </button>
                <a href="/Home/Channels/@deviceId" class="btn btn-info me-2">
                    <i class="fas fa-battery-three-quarters"></i> Channel Overview
                </a>
            </div>
        </div>
        
        
    </div>
</div>

<div id="deviceContent">
    <!-- Channel Data와 Secondary Data -->
    <div class="row mb-4">
        <!-- Channel Data -->
        <div class="col-lg-9">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        @* <h5><i class="fas fa-battery-three-quarters"></i> Channel Data (<span id="channelCount">@(Model?.Channels?.Count ?? 0)</span> channels)</h5> *@
                        <h5><i class="fas fa-battery-three-quarters"></i> Channel Data </h5>
                        <div class="d-flex align-items-center">
                            <!-- Device Summary Stats -->
                            <div class="me-4">
                                <div class="d-flex align-items-center">
                                    <div class="me-3 text-center">
                                        <div class="fs-6 fw-bold text-primary" id="activeChannelsCount">
                                            @(Model?.Channels?.Count(c => c.Status != GPIMSWebServer.Models.ChannelStatus.Idle) ?? 0)
                                        </div>
                                        <small class="text-muted">Active Channels</small>
                                    </div>
                                    <div class="text-center">
                                        <div class="fs-6 fw-bold text-success" id="totalPower">
                                            @(Model?.Channels?.Sum(c => c.Power).ToString("F1") ?? "0.0")W
                                        </div>
                                        <small class="text-muted">Total Power</small>
                                    </div>
                                </div>
                            </div>
                            <!-- Update Info -->
                            <div>
                                <small class="text-muted">Last update: <span id="lastUpdateTime">@(Model?.Timestamp.ToString("HH:mm:ss") ?? "--:--:--")</span></small>
                                <span class="badge bg-secondary ms-2" id="updateCounter">0 updates</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div>
                            <label for="channelsPerPage" class="form-label">Channels per page:</label>
                            <select id="channelsPerPage" class="form-select form-select-sm d-inline-block w-auto">
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="all">All</option>
                            </select>
                        </div>
                        <div>
                            <button id="prevPage" class="btn btn-sm btn-outline-secondary" disabled>
                                <i class="fas fa-chevron-left"></i> Previous
                            </button>
                            <span id="pageInfo" class="mx-2">Page 1 of 1</span>
                            <button id="nextPage" class="btn btn-sm btn-outline-secondary" disabled>
                                Next <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark sticky-top">
                                <tr>
                                    <th>Ch#</th>
                                    <th>Status</th>
                                    <th>Mode</th>
                                    <th>Voltage (V)</th>
                                    <th>Current (A)</th>
                                    <th>Power (W)</th>
                                    <th>Capacity (Ah)</th>
                                    <th>Temp (°C)</th>
                                    <th>Cycle</th>
                                    <th>Step</th>
                                </tr>
                            </thead>
                            <tbody id="channelTableBody">
                                @if (Model?.Channels != null)
                                {
                                    @foreach (var channel in Model.Channels.Take(20))
                                    {
                                        <tr data-channel="@channel.ChannelNumber">
                                            <td><strong>@channel.ChannelNumber</strong></td>
                                            <td><span class="badge status-@channel.Status.ToString().ToLower()">@channel.Status</span></td>
                                            <td><span class="badge bg-secondary">@channel.Mode</span></td>
                                            <td class="data-value">@channel.Voltage.ToString("F3")</td>
                                            <td class="data-value">@channel.Current.ToString("F3")</td>
                                            <td class="data-value">@channel.Power.ToString("F2")</td>
                                            <td class="data-value">@channel.Capacity.ToString("F2")</td>
                                            <td class="data-value">@channel.ChamberTemperature.ToString("F1")</td>
                                            <td class="data-value">@channel.CycleNo</td>
                                            <td class="data-value">@channel.StepNo</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            
            <!-- Chart Section - 채널 데이터 바로 아래 추가 -->
            <div class="card mb-4 mt-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="fas fa-chart-line"></i> Real-time Voltage & Current Chart</h5>
                    <div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="showVoltageChart" checked>
                            <label class="form-check-label" for="showVoltageChart">Voltage</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="showCurrentChart" checked>
                            <label class="form-check-label" for="showCurrentChart">Current</label>
                        </div>
                        <button id="clearChartBtn" class="btn btn-sm btn-outline-danger ms-2">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="height: 400px;">
                        <canvas id="voltageCurrentChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Secondary Data Column (Alarms, CAN, LIN, AUX 세로 배치) -->
        <div class="col-lg-3">
            <!-- Alarms -->
            <div class="card mb-3">
                <div class="card-header">
                    <h6><i class="fas fa-exclamation-triangle"></i> Active Alarms</h6>
                </div>
                <div class="card-body" id="alarmsContent" style="max-height: 200px; overflow-y: auto;">
                    @if (Model?.AlarmData?.Any() == true)
                    {
                        @foreach (var alarm in Model.AlarmData)
                        {
                            <div class="alert alert-sm alarm-@alarm.Severity.ToString().ToLower()" role="alert">
                                <strong>@alarm.Name</strong><br>
                                <small>@alarm.Description</small>
                                <div class="small text-muted">@alarm.Timestamp.ToString("HH:mm:ss")</div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No active alarms</p>
                    }
                </div>
            </div>

            <!-- CAN Data -->
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6><i class="fas fa-network-wired"></i> CAN Data</h6>
                    <span class="badge bg-secondary" id="canDataCount">@(Model?.CANData?.Count ?? 0)</span>
                </div>
                <div class="card-body" id="canDataContent" style="max-height: 200px; overflow-y: auto;">
                    @if (Model?.CANData?.Any() == true)
                    {
                        @foreach (var can in Model.CANData.Take(10))
                        {
                            <div class="mb-2 p-2 border rounded">
                                <div class="d-flex justify-content-between align-items-center">
                                    <strong class="small">@can.Name</strong>
                                    <span class="data-value">@can.Value.ToString("F2")</span>
                                </div>
                                <div class="small text-muted">
                                    BMS ID: @can.BmsId | Range: @can.Min.ToString("F1") - @can.Max.ToString("F1")
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No CAN data</p>
                    }
                </div>
            </div>

            <!-- LIN Data -->
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6><i class="fas fa-broadcast-tower"></i> LIN Data</h6>
                    <span class="badge bg-secondary" id="linDataCount">@(Model?.LINData?.Count ?? 0)</span>
                </div>
                <div class="card-body" id="linDataContent" style="max-height: 200px; overflow-y: auto;">
                    @if (Model?.LINData?.Any() == true)
                    {
                        @foreach (var lin in Model.LINData.Take(10))
                        {
                            <div class="mb-2 p-2 border rounded">
                                <div class="d-flex justify-content-between align-items-center">
                                    <strong class="small">@lin.Name</strong>
                                    <span class="data-value">@lin.Value.ToString("F2")</span>
                                </div>
                                <div class="small text-muted">
                                    BMS ID: @lin.BmsId | Range: @lin.Min.ToString("F1") - @lin.Max.ToString("F1")
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No LIN data</p>
                    }
                </div>
            </div>

            <!-- Auxiliary Data -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6><i class="fas fa-thermometer-half"></i> Auxiliary Data</h6>
                    <span class="badge bg-secondary" id="auxDataCount">@(Model?.AuxData?.Count ?? 0)</span>
                </div>
                <div class="card-body" id="auxDataContent" style="max-height: 200px; overflow-y: auto;">
                    @if (Model?.AuxData?.Any() == true)
                    {
                        @foreach (var aux in Model.AuxData.Take(10))
                        {
                            <div class="mb-2 p-2 border rounded">
                                <div class="d-flex justify-content-between align-items-center">
                                    <strong class="small">@aux.SensorName</strong>
                                    <span class="data-value">@aux.Value.ToString("F2")</span>
                                </div>
                                <div class="small text-muted">
                                    Sensor ID: @aux.SensorId | Range: @aux.SafeLowerLimit.ToString("F1") - @aux.SafeUpperLimit.ToString("F1")
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No auxiliary data</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    const deviceId = '@deviceId';
    let isConnected = false;
    let updateCount = 0;
    let connection;
    let allChannels = [];
    let currentPage = 1;
    let channelsPerPage = 20;
    
    // 차트 관련 변수
    let voltageCurrentChart;
    let chartData = {
        labels: [],
        datasets: {
            voltage: [],
            current: []
        }
    };
    const maxDataPoints = 50; // 최대 데이터 포인트 개수
    
    function updateConnectionStatus(connected, message) {
        isConnected = connected;
        const statusElement = document.getElementById('connectionStatus');
        
        if (connected) {
            statusElement.className = 'alert alert-success d-flex align-items-center';
            statusElement.innerHTML = `
                <i class="fas fa-check-circle me-2"></i>
                <span>${message}</span>
            `;
        } else {
            statusElement.className = 'alert alert-danger d-flex align-items-center';
            statusElement.innerHTML = `
                <i class="fas fa-exclamation-triangle me-2"></i>
                <span>${message}</span>
            `;
        }
    }

    // 차트 초기화
    function initChart() {
        if (typeof Chart === 'undefined') {
            console.error('Chart.js is not loaded!');
            return;
        }

        const ctx = document.getElementById('voltageCurrentChart').getContext('2d');
        
        voltageCurrentChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: []
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                scales: {
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: 'Voltage (V)'
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Current (A)'
                        },
                        grid: {
                            drawOnChartArea: false,
                        },
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Channel Voltage & Current'
                    },
                    legend: {
                        display: true,
                        position: 'top'
                    }
                },
                elements: {
                    point: {
                        radius: 2
                    }
                }
            }
        });

        console.log('✅ Chart initialized');
    }

    // 차트 데이터 업데이트
    function updateChart(deviceData) {
        if (!voltageCurrentChart) return;

        const timestamp = new Date(deviceData.timestamp || deviceData.Timestamp).toLocaleTimeString();
        const channels = deviceData.channels || deviceData.Channels || [];

        // 라벨 추가 (시간)
        chartData.labels.push(timestamp);
        if (chartData.labels.length > maxDataPoints) {
            chartData.labels = chartData.labels.slice(-maxDataPoints);
        }

        // 각 채널의 데이터 처리
        const showVoltage = document.getElementById('showVoltageChart').checked;
        const showCurrent = document.getElementById('showCurrentChart').checked;

        // 기존 데이터셋 초기화
        voltageCurrentChart.data.labels = chartData.labels;
        voltageCurrentChart.data.datasets = [];

        channels.forEach((channel, index) => {
            const channelNumber = channel.channelNumber || channel.ChannelNumber || index;
            const voltage = channel.voltage || channel.Voltage || 0;
            const current = channel.current || channel.Current || 0;
            
            // 각 채널별 고유 색상 생성
            const hue = (channelNumber * 137.5) % 360;
            const voltageColor = `hsl(${hue}, 70%, 50%)`;
            const currentColor = `hsl(${(hue + 180) % 360}, 70%, 60%)`;

            // 채널별 데이터 저장
            if (!chartData.datasets.voltage[index]) {
                chartData.datasets.voltage[index] = [];
            }
            if (!chartData.datasets.current[index]) {
                chartData.datasets.current[index] = [];
            }

            chartData.datasets.voltage[index].push(voltage);
            chartData.datasets.current[index].push(current);

            // 데이터 포인트 수 제한
            if (chartData.datasets.voltage[index].length > maxDataPoints) {
                chartData.datasets.voltage[index] = chartData.datasets.voltage[index].slice(-maxDataPoints);
            }
            if (chartData.datasets.current[index].length > maxDataPoints) {
                chartData.datasets.current[index] = chartData.datasets.current[index].slice(-maxDataPoints);
            }

            // Voltage 데이터셋 추가
            if (showVoltage) {
                voltageCurrentChart.data.datasets.push({
                    label: `Ch${channelNumber} Voltage`,
                    data: [...chartData.datasets.voltage[index]],
                    borderColor: voltageColor,
                    backgroundColor: voltageColor + '20',
                    yAxisID: 'y',
                    fill: false,
                    borderWidth: 2,
                    pointRadius: 2
                });
            }

            // Current 데이터셋 추가
            if (showCurrent) {
                voltageCurrentChart.data.datasets.push({
                    label: `Ch${channelNumber} Current`,
                    data: [...chartData.datasets.current[index]],
                    borderColor: currentColor,
                    backgroundColor: currentColor + '20',
                    yAxisID: 'y1',
                    fill: false,
                    borderWidth: 2,
                    borderDash: [5, 5], // 점선으로 구분
                    pointRadius: 2
                });
            }
        });

        voltageCurrentChart.update('none');
    }

    // 차트 클리어
    function clearChart() {
        if (!voltageCurrentChart) return;
        
        chartData.labels = [];
        chartData.datasets.voltage = [];
        chartData.datasets.current = [];
        
        voltageCurrentChart.data.labels = [];
        voltageCurrentChart.data.datasets = [];
        voltageCurrentChart.update();
        
        console.log('📊 Chart cleared');
    }

    function initSignalR() {
        connection = new signalR.HubConnectionBuilder()
            .withUrl("/deviceHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start().then(function () {
            console.log("✅ SignalR Connected");
            return connection.invoke("JoinDeviceGroup", deviceId);
        }).then(function() {
            console.log("✅ Joined device group:", deviceId);
            updateConnectionStatus(true, "Connected to real-time data");
        }).catch(function (err) {
            console.error("❌ SignalR connection failed:", err);
            updateConnectionStatus(false, "Failed to connect: " + err.toString());
        });

        connection.on("ReceiveDeviceData", function (deviceData) {
            console.log("📦 Received device data for update #" + (updateCount + 1), deviceData);
            updateCount++;
            forceUpdateUI(deviceData);
            updateChart(deviceData); // 차트 업데이트 추가
        });

        connection.onclose(function(error) {
            console.log("🔴 SignalR connection closed", error);
            updateConnectionStatus(false, "Connection lost. Attempting to reconnect...");
            setTimeout(function() {
                initSignalR();
            }, 3000);
        });
    }

    function forceUpdateUI(deviceData) {
        console.log("🔄 Force updating UI with:", deviceData);
        
        try {
            // 업데이트 카운터 표시
            const counterElement = document.getElementById('updateCounter');
            if (counterElement) {
                counterElement.textContent = `${updateCount} updates`;
            }

            // 마지막 업데이트 시간
            const lastUpdateElement = document.getElementById('lastUpdateTime');
            if (lastUpdateElement) {
                lastUpdateElement.textContent = new Date(deviceData.timestamp).toLocaleTimeString();
            }

            // 채널 데이터 업데이트
            const channels = deviceData.channels || deviceData.Channels || [];
            allChannels = channels;
            
            // 채널 수 업데이트
            const channelCountElement = document.getElementById('channelCount');
            if (channelCountElement) {
                channelCountElement.textContent = channels.length;
            }

            // 테이블 업데이트
            updateChannelTable();
            updatePaginationControls();

            // 디바이스 요약 업데이트
            forceUpdateSummary(deviceData);

            // CAN 데이터 업데이트
            const canData = deviceData.canData || deviceData.CANData || [];
            forceUpdateCANData(canData);

            // LIN 데이터 업데이트
            const linData = deviceData.linData || deviceData.LINData || [];
            forceUpdateLINData(linData);

            // 보조 데이터 업데이트
            const auxData = deviceData.auxData || deviceData.AuxData || [];
            forceUpdateAuxData(auxData);

            // 알람 업데이트
            const alarmData = deviceData.alarmData || deviceData.AlarmData || [];
            forceUpdateAlarms(alarmData);

            // 데이터 카운트 업데이트 (각 카드의 배지로 이동)
            forceUpdateDataCounts(deviceData);

            console.log("✅ UI force update completed");

        } catch (error) {
            console.error("❌ Error during UI update:", error);
        }
    }

    // Pagination functions
    function updateChannelTable() {
        const tbody = document.getElementById('channelTableBody');
        if (!tbody || !allChannels.length) return;

        let startIndex, endIndex;
        
        if (channelsPerPage === 'all') {
            startIndex = 0;
            endIndex = allChannels.length;
        } else {
            startIndex = (currentPage - 1) * channelsPerPage;
            endIndex = Math.min(startIndex + channelsPerPage, allChannels.length);
        }

        const displayChannels = allChannels.slice(startIndex, endIndex);
        let newHTML = '';
        
        displayChannels.forEach(function(channel) {
            const channelNumber = channel.channelNumber || channel.ChannelNumber || 'N/A';
            const rawStatus = channel.status !== undefined ? channel.status : (channel.Status !== undefined ? channel.Status : null);
            const rawMode = channel.mode !== undefined ? channel.mode : (channel.Mode !== undefined ? channel.Mode : null);
            const voltage = channel.voltage || channel.Voltage || 0;
            const current = channel.current || channel.Current || 0;
            const power = channel.power || channel.Power || 0;
            const capacity = channel.capacity || channel.Capacity || 0;
            const temperature = channel.chamberTemperature || channel.ChamberTemperature || 0;
            const cycleNo = channel.cycleNo || channel.CycleNo || 0;
            const stepNo = channel.stepNo || channel.StepNo || 0;
            
            const status = getStatusText(rawStatus);
            const mode = getModeText(rawMode);
            const statusClass = getStatusClass(status);
            
            newHTML += `
                <tr data-channel="${channelNumber}">
                    <td><strong>${channelNumber}</strong></td>
                    <td><span class="badge ${statusClass}">${status}</span></td>
                    <td><span class="badge bg-secondary">${mode}</span></td>
                    <td class="data-value">${parseFloat(voltage).toFixed(3)}</td>
                    <td class="data-value">${parseFloat(current).toFixed(3)}</td>
                    <td class="data-value">${parseFloat(power).toFixed(2)}</td>
                    <td class="data-value">${parseFloat(capacity).toFixed(2)}</td>
                    <td class="data-value">${parseFloat(temperature).toFixed(1)}</td>
                    <td class="data-value">${cycleNo}</td>
                    <td class="data-value">${stepNo}</td>
                </tr>
            `;
        });
        
        tbody.innerHTML = newHTML;
    }

    function updatePaginationControls() {
        if (channelsPerPage === 'all') {
            document.getElementById('prevPage').disabled = true;
            document.getElementById('nextPage').disabled = true;
            document.getElementById('pageInfo').textContent = `Showing all ${allChannels.length} channels`;
            return;
        }

        const totalPages = Math.ceil(allChannels.length / channelsPerPage);
        
        document.getElementById('prevPage').disabled = currentPage <= 1;
        document.getElementById('nextPage').disabled = currentPage >= totalPages;
        document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${totalPages}`;
    }

    // Enum 변환 함수들
    function getStatusText(statusValue) {
        const statusMap = {
            0: 'Idle',
            1: 'Rest', 
            2: 'Discharge',
            3: 'Charge',
            4: 'Pause',
            5: 'Finish'
        };
        
        if (typeof statusValue === 'string') {
            return statusValue;
        }
        
        return statusMap[statusValue] || `Unknown(${statusValue})`;
    }
    
    function getModeText(modeValue) {
        const modeMap = {
            0: 'Rest',
            1: 'ChargeCC',
            2: 'ChargeCCCV', 
            3: 'ChargeCP',
            4: 'ChargeCPCV',
            5: 'DischargeCC',
            6: 'DischargeCCCV',
            7: 'DischargeCP',
            8: 'DischargeCPCV'
        };
        
        if (typeof modeValue === 'string') {
            return modeValue;
        }
        
        return modeMap[modeValue] || `Unknown(${modeValue})`;
    }

    function getStatusClass(status) {
        if (!status || typeof status !== 'string') {
            return 'status-unknown';
        }
        const statusLower = status.toString().toLowerCase();
        return `status-${statusLower}`;
    }

    function forceUpdateSummary(deviceData) {
        if (!deviceData.channels && !deviceData.Channels) return;

        const channels = deviceData.channels || deviceData.Channels || [];

        // 활성 채널 수
        const activeChannels = channels.filter(ch => {
            const rawStatus = ch.status !== undefined ? ch.status : (ch.Status !== undefined ? ch.Status : 0);
            return rawStatus !== 0; // Idle이 아닌 것들
        }).length;
        
        const activeElement = document.getElementById('activeChannelsCount');
        if (activeElement) {
            activeElement.textContent = activeChannels;
        }

        // 총 전력
        const totalPower = channels.reduce((sum, ch) => {
            const power = ch.power || ch.Power || 0;
            return sum + parseFloat(power);
        }, 0);
        
        const powerElement = document.getElementById('totalPower');
        if (powerElement) {
            powerElement.textContent = totalPower.toFixed(1) + 'W';
        }
    }

    function forceUpdateCANData(canData) {
        const container = document.getElementById('canDataContent');
        if (!container) return;

        if (!canData || canData.length === 0) {
            container.innerHTML = '<p class="text-muted">No CAN data</p>';
            return;
        }

        let html = '';
        canData.slice(0, 20).forEach(function(can) {
            const name = can.name || can.Name || 'Unknown';
            const value = can.value || can.Value || 0;
            const bmsId = can.bmsId || can.BmsId || 0;
            const min = can.min || can.Min || 0;
            const max = can.max || can.Max || 0;
            
            html += `
                <div class="mb-2 p-2 border rounded">
                    <div class="d-flex justify-content-between align-items-center">
                        <strong class="small">${name}</strong>
                        <span class="data-value">${parseFloat(value).toFixed(2)}</span>
                    </div>
                    <div class="small text-muted">
                        BMS ID: ${bmsId} | Range: ${parseFloat(min).toFixed(1)} - ${parseFloat(max).toFixed(1)}
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }

    function forceUpdateLINData(linData) {
        const container = document.getElementById('linDataContent');
        if (!container) return;

        if (!linData || linData.length === 0) {
            container.innerHTML = '<p class="text-muted">No LIN data</p>';
            return;
        }

        let html = '';
        linData.slice(0, 20).forEach(function(lin) {
            const name = lin.name || lin.Name || 'Unknown';
            const value = lin.value || lin.Value || 0;
            const bmsId = lin.bmsId || lin.BmsId || 0;
            const min = lin.min || lin.Min || 0;
            const max = lin.max || lin.Max || 0;
            
            html += `
                <div class="mb-2 p-2 border rounded">
                    <div class="d-flex justify-content-between align-items-center">
                        <strong class="small">${name}</strong>
                        <span class="data-value">${parseFloat(value).toFixed(2)}</span>
                    </div>
                    <div class="small text-muted">
                        BMS ID: ${bmsId} | Range: ${parseFloat(min).toFixed(1)} - ${parseFloat(max).toFixed(1)}
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }

    function forceUpdateAuxData(auxData) {
        const container = document.getElementById('auxDataContent');
        if (!container) return;

        if (!auxData || auxData.length === 0) {
            container.innerHTML = '<p class="text-muted">No auxiliary data</p>';
            return;
        }

        let html = '';
        auxData.slice(0, 20).forEach(function(aux) {
            const sensorName = aux.sensorName || aux.SensorName || 'Unknown Sensor';
            const value = aux.value || aux.Value || 0;
            const sensorId = aux.sensorId || aux.SensorId || 0;
            const safeLowerLimit = aux.safeLowerLimit || aux.SafeLowerLimit || 0;
            const safeUpperLimit = aux.safeUpperLimit || aux.SafeUpperLimit || 0;
            
            html += `
                <div class="mb-2 p-2 border rounded">
                    <div class="d-flex justify-content-between align-items-center">
                        <strong class="small">${sensorName}</strong>
                        <span class="data-value">${parseFloat(value).toFixed(2)}</span>
                    </div>
                    <div class="small text-muted">
                        Sensor ID: ${sensorId} | Range: ${parseFloat(safeLowerLimit).toFixed(1)} - ${parseFloat(safeUpperLimit).toFixed(1)}
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }

    function forceUpdateAlarms(alarmData) {
        const container = document.getElementById('alarmsContent');
        if (!container) return;

        if (!alarmData || alarmData.length === 0) {
            container.innerHTML = '<p class="text-muted">No active alarms</p>';
            return;
        }

        let html = '';
        alarmData.forEach(function(alarm) {
            const name = alarm.name || alarm.Name || 'Unknown Alarm';
            const description = alarm.description || alarm.Description || 'No description';
            const timestamp = alarm.timestamp || alarm.Timestamp || new Date().toISOString();
            const severity = alarm.severity || alarm.Severity || 'info';
            
            const severityClass = `alarm-${severity.toString().toLowerCase()}`;
            html += `
                <div class="alert alert-sm ${severityClass}" role="alert">
                    <strong>${name}</strong><br>
                    <small>${description}</small>
                    <div class="small text-muted">${new Date(timestamp).toLocaleTimeString()}</div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }

    function forceUpdateDataCounts(deviceData) {
        // 각 카드 헤더의 배지 업데이트
        const canCount = document.getElementById('canDataCount');
        if (canCount) {
            const canData = deviceData.canData || deviceData.CANData || [];
            canCount.textContent = canData.length;
        }

        const linCount = document.getElementById('linDataCount');
        if (linCount) {
            const linData = deviceData.linData || deviceData.LINData || [];
            linCount.textContent = linData.length;
        }

        const auxCount = document.getElementById('auxDataCount');
        if (auxCount) {
            const auxData = deviceData.auxData || deviceData.AuxData || [];
            auxCount.textContent = auxData.length;
        }
    }

    // Event listeners
    document.getElementById('manualRefreshBtn').addEventListener('click', function() {
        if (isConnected && connection) {
            console.log("🔄 Manual refresh requested");
            connection.invoke("RequestLatestData", deviceId);
        }
    });

    // 차트 관련 이벤트 리스너
    document.getElementById('showVoltageChart').addEventListener('change', function() {
        if (voltageCurrentChart) {
            voltageCurrentChart.update();
        }
    });

    document.getElementById('showCurrentChart').addEventListener('change', function() {
        if (voltageCurrentChart) {
            voltageCurrentChart.update();
        }
    });

    document.getElementById('clearChartBtn').addEventListener('click', function() {
        clearChart();
    });

    document.getElementById('channelsPerPage').addEventListener('change', function() {
        channelsPerPage = this.value === 'all' ? 'all' : parseInt(this.value);
        currentPage = 1;
        updateChannelTable();
        updatePaginationControls();
    });

    document.getElementById('prevPage').addEventListener('click', function() {
        if (currentPage > 1) {
            currentPage--;
            updateChannelTable();
            updatePaginationControls();
        }
    });

    document.getElementById('nextPage').addEventListener('click', function() {
        const totalPages = Math.ceil(allChannels.length / channelsPerPage);
        if (currentPage < totalPages) {
            currentPage++;
            updateChannelTable();
            updatePaginationControls();
        }
    });

    // 초기화
    document.addEventListener('DOMContentLoaded', function() {
        console.log("🚀 Page loaded, initializing...");
        
        // 필수 라이브러리 확인
        if (typeof signalR === 'undefined') {
            console.error('❌ SignalR is not available! Please check if the library is loaded.');
            updateConnectionStatus(false, "SignalR library not loaded");
            return;
        }
        
        if (typeof Chart === 'undefined') {
            console.error('❌ Chart.js is not available! Please check if the library is loaded.');
            updateConnectionStatus(false, "Chart.js library not loaded");
            return;
        }
        
        console.log('✅ All libraries loaded successfully');
        
        // 차트 초기화
        setTimeout(() => {
            initChart();
        }, 100);
        
        // SignalR 초기화
        initSignalR();
    });

    // 페이지 언로드 시 정리
    window.addEventListener('beforeunload', function() {
        if (connection && isConnected) {
            connection.invoke("LeaveDeviceGroup", deviceId);
        }
    });
</script>
}