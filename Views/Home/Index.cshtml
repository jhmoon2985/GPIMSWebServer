@model List<string>
@{
    ViewData["Title"] = "Device Overview";
    var userRole = ViewBag.UserRole as string ?? "Unknown";
    var userName = ViewBag.UserName as string ?? "User";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                <h1 class="fs-4"><i class="fas fa-tachometer-alt"></i> Device Overview</h1>
                <p class="text-muted mb-0">
                    Welcome back, <strong>@userName</strong> | Role: 
                    <span class="badge bg-@GetRoleBadgeColor()">@userRole</span>
                </p>
            </div>
            
            @if (User.IsInRole("Admin"))
            {
                <div>
                    <a href="/User" class="btn btn-outline-primary me-2">
                        <i class="fas fa-users"></i> Manage Users
                    </a>
                </div>
            }
        </div>
        
        <p class="text-muted">Monitor all connected devices in real-time</p>
        
        <!-- Connection Status -->
        <div class="alert alert-info d-flex align-items-center" id="connectionStatus">
            <div class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></div>
            <span>Connecting to real-time data...</span>
        </div>
        
        <!-- Device Summary Stats -->
        <div class="row mb-3">
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-success" id="onlineDevicesCount">0</h5>
                        <p class="card-text">Online Devices</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-danger" id="offlineDevicesCount">0</h5>
                        <p class="card-text">Offline Devices</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-primary" id="totalActiveChannels">0</h5>
                        <p class="card-text">Active Channels</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-warning" id="totalPowerConsumption">0.0W</h5>
                        <p class="card-text">Total Power</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- User Permission Notice -->
        @if (userRole == "Operator")
        {
            <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                <strong>Operator Mode:</strong> You have view-only access to device monitoring.
            </div>
        }
        else if (userRole == "Maintenance")
        {
            <div class="alert alert-warning">
                <i class="fas fa-tools me-2"></i>
                <strong>Maintenance Mode:</strong> You can monitor and perform maintenance operations on devices.
            </div>
        }
        else if (userRole == "Admin")
        {
            <div class="alert alert-success">
                <i class="fas fa-crown me-2"></i>
                <strong>Administrator Mode:</strong> You have full access to all system functions including user management.
            </div>
        }
    </div>
</div>

<div class="row" id="deviceGrid">
    @if (Model.Any())
    {
        @foreach (var deviceId in Model)
        {
            <div class="col-md-6 col-lg-4 mb-3" id="device-card-@deviceId">
                <div class="card device-card h-100">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-microchip"></i> @deviceId
                            <span class="float-end">
                                <i class="fas fa-circle text-secondary" id="status-indicator-@deviceId" title="Offline"></i>
                            </span>
                        </h5>
                        <p class="card-text">
                            <span class="badge bg-secondary" id="status-@deviceId">Offline</span>
                            <span class="text-muted">Last update: <span id="lastUpdate-@deviceId">--</span></span>
                        </p>
                        <div class="mt-3" id="deviceSummary-@deviceId">
                            <div class="row text-center mb-2">
                                <div class="col-6">
                                    <div class="border-end">
                                        <div class="fs-6 fw-bold text-primary" id="activeChannels-@deviceId">0</div>
                                        <small class="text-muted">Active Ch</small>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="fs-6 fw-bold text-success" id="totalPower-@deviceId">0.0</div>
                                    <small class="text-muted">Total W</small>
                                </div>
                            </div>
                            <div class="row text-center">
                                <div class="col-4">
                                    <div class="small text-muted">
                                        <div id="alarmCount-@deviceId">0</div>
                                        <small>Alarms</small>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="small text-muted">
                                        <div id="channelCount-@deviceId">0</div>
                                        <small>Channels</small>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="small text-muted">
                                        <div id="heartbeat-@deviceId">--</div>
                                        <small>Heartbeat</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <a href="/Home/Device/@deviceId" class="btn btn-primary btn-sm">
                                <i class="fas fa-eye"></i> View Details
                            </a>
                            <a href="/Home/Monitoring/@deviceId" class="btn btn-outline-secondary btn-sm">
                                <i class="fas fa-chart-line"></i> Real-time
                            </a>
                            
                            @* Only show offline button for Maintenance and Admin users *@
                            @if (userRole == "Admin" || userRole == "Maintenance")
                            {
                                <button class="btn btn-outline-danger btn-sm" onclick="markDeviceOffline('@deviceId')" 
                                        id="offline-btn-@deviceId" style="display: none;">
                                    <i class="fas fa-power-off"></i> Mark Offline
                                </button>
                            }
                        </div>
                        
                        @* Role-based action restrictions notice *@
                        @if (userRole == "Operator")
                        {
                            <div class="mt-2">
                                <small class="text-muted">
                                    <i class="fas fa-lock me-1"></i>View-only access
                                </small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="alert alert-info" id="noDevicesAlert">
                <i class="fas fa-info-circle"></i> No devices connected. Waiting for device data...
                
                @if (userRole == "Admin")
                {
                    <div class="mt-2">
                        <small>As an administrator, you can manage device connections and user access.</small>
                    </div>
                }
                else if (userRole == "Maintenance")
                {
                    <div class="mt-2">
                        <small>Check device connections or contact an administrator if devices should be available.</small>
                    </div>
                }
                else
                {
                    <div class="mt-2">
                        <small>Contact maintenance or administrator if devices should be available.</small>
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Session Info Footer -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card bg-light">
            <div class="card-body py-2">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <small class="text-muted">
                            <i class="fas fa-user me-1"></i>
                            Logged in as: <strong>@User.Identity?.Name</strong> 
                            (@User.FindFirst("Department")?.Value)
                        </small>
                    </div>
                    <div class="col-md-6 text-end">
                        <small class="text-muted">
                            <i class="fas fa-clock me-1"></i>
                            Session expires after 8 hours of inactivity
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetRoleBadgeColor()
    {
        var role = ViewBag.UserRole as string;
        return role switch
        {
            "Admin" => "danger",
            "Maintenance" => "warning", 
            "Operator" => "info",
            _ => "secondary"
        };
    }
}

@section Scripts {
<script>
    let connection;
    let isConnected = false;
    let knownDevices = new Set();
    let deviceStatuses = new Map(); // deviceId -> {isOnline, lastHeartbeat, etc.}
    const userRole = '@userRole';
    
    function updateConnectionStatus(connected, message) {
        isConnected = connected;
        const statusElement = document.getElementById('connectionStatus');
        
        if (connected) {
            statusElement.className = 'alert alert-success d-flex align-items-center';
            statusElement.innerHTML = `
                <i class="fas fa-check-circle me-2"></i>
                <span>${message}</span>
            `;
        } else {
            statusElement.className = 'alert alert-danger d-flex align-items-center';
            statusElement.innerHTML = `
                <i class="fas fa-exclamation-triangle me-2"></i>
                <span>${message}</span>
            `;
        }
    }
    
    function updateDeviceCard(deviceData) {
        const deviceId = deviceData.deviceId || deviceData.DeviceId;
        if (!deviceId) return;
        
        console.log(`Updating device card for ${deviceId}`, deviceData);
        
        // Mark device as known and online
        knownDevices.add(deviceId);
        deviceStatuses.set(deviceId, {
            isOnline: true,
            lastUpdate: new Date(),
            deviceData: deviceData
        });
        
        // Update status indicator and badge
        updateDeviceStatus(deviceId, true);
        
        // Update last update time
        const lastUpdateElement = document.getElementById(`lastUpdate-${deviceId}`);
        if (lastUpdateElement) {
            const timestamp = deviceData.timestamp || deviceData.Timestamp || new Date().toISOString();
            lastUpdateElement.textContent = new Date(timestamp).toLocaleTimeString();
        }
        
        // Update heartbeat time
        const heartbeatElement = document.getElementById(`heartbeat-${deviceId}`);
        if (heartbeatElement) {
            heartbeatElement.textContent = new Date().toLocaleTimeString();
        }
        
        // Update device summary
        const channels = deviceData.channels || deviceData.Channels || [];
        const alarms = deviceData.alarmData || deviceData.AlarmData || [];
        
        // Active channels count
        const activeChannelsElement = document.getElementById(`activeChannels-${deviceId}`);
        if (activeChannelsElement) {
            const activeCount = channels.filter(ch => {
                const status = ch.status !== undefined ? ch.status : (ch.Status !== undefined ? ch.Status : 0);
                return status !== 0; // Not Idle
            }).length;
            activeChannelsElement.textContent = activeCount;
        }
        
        // Total power
        const totalPowerElement = document.getElementById(`totalPower-${deviceId}`);
        if (totalPowerElement) {
            const totalPower = channels.reduce((sum, ch) => {
                const power = ch.power || ch.Power || 0;
                return sum + parseFloat(power);
            }, 0);
            totalPowerElement.textContent = totalPower.toFixed(1);
        }
        
        // Channel count
        const channelCountElement = document.getElementById(`channelCount-${deviceId}`);
        if (channelCountElement) {
            channelCountElement.textContent = channels.length;
        }
        
        // Alarm count
        const alarmCountElement = document.getElementById(`alarmCount-${deviceId}`);
        if (alarmCountElement) {
            alarmCountElement.textContent = alarms.length;
            // Change color based on alarm severity
            if (alarms.some(a => (a.severity || a.Severity) === 'Critical' || (a.severity || a.Severity) === 3)) {
                alarmCountElement.className = 'fw-bold text-danger';
            } else if (alarms.length > 0) {
                alarmCountElement.className = 'fw-bold text-warning';
            } else {
                alarmCountElement.className = '';
            }
        }
        
        // If this is a new device not in the static list, add it dynamically
        if (!document.getElementById(`device-card-${deviceId}`)) {
            addNewDeviceCard(deviceId);
        }
        
        // Hide "no devices" alert if it exists
        const noDevicesAlert = document.getElementById('noDevicesAlert');
        if (noDevicesAlert && knownDevices.size > 0) {
            noDevicesAlert.style.display = 'none';
        }
        
        // Update summary stats
        updateSummaryStats();
    }
    
    function updateDeviceStatus(deviceId, isOnline) {
        // Update status indicator (dot)
        const statusIndicator = document.getElementById(`status-indicator-${deviceId}`);
        if (statusIndicator) {
            if (isOnline) {
                statusIndicator.className = 'fas fa-circle text-success';
                statusIndicator.title = 'Online';
            } else {
                statusIndicator.className = 'fas fa-circle text-danger';
                statusIndicator.title = 'Offline';
            }
        }
        
        // Update status badge
        const statusBadge = document.getElementById(`status-${deviceId}`);
        if (statusBadge) {
            if (isOnline) {
                statusBadge.className = 'badge bg-success';
                statusBadge.textContent = 'Online';
            } else {
                statusBadge.className = 'badge bg-danger';
                statusBadge.textContent = 'Offline';
            }
        }
        
        // Show/hide offline button based on user role and device status
        const offlineBtn = document.getElementById(`offline-btn-${deviceId}`);
        if (offlineBtn && (userRole === 'Admin' || userRole === 'Maintenance')) {
            offlineBtn.style.display = isOnline ? 'inline-block' : 'none';
        }
        
        // Update stored status
        const currentStatus = deviceStatuses.get(deviceId) || {};
        currentStatus.isOnline = isOnline;
        currentStatus.lastStatusChange = new Date();
        deviceStatuses.set(deviceId, currentStatus);
    }
    
    function updateSummaryStats() {
        let onlineCount = 0;
        let offlineCount = 0;
        let totalActiveChannels = 0;
        let totalPower = 0;
        
        deviceStatuses.forEach((status, deviceId) => {
            if (status.isOnline) {
                onlineCount++;
                // Get data from device data if available
                if (status.deviceData) {
                    const channels = status.deviceData.channels || status.deviceData.Channels || [];
                    totalActiveChannels += channels.filter(ch => {
                        const channelStatus = ch.status !== undefined ? ch.status : (ch.Status !== undefined ? ch.Status : 0);
                        return channelStatus !== 0;
                    }).length;
                    
                    totalPower += channels.reduce((sum, ch) => {
                        const power = ch.power || ch.Power || 0;
                        return sum + parseFloat(power);
                    }, 0);
                }
            } else {
                offlineCount++;
            }
        });
        
        // Update summary cards
        const onlineElement = document.getElementById('onlineDevicesCount');
        if (onlineElement) onlineElement.textContent = onlineCount;
        
        const offlineElement = document.getElementById('offlineDevicesCount');
        if (offlineElement) offlineElement.textContent = offlineCount;
        
        const activeChannelsElement = document.getElementById('totalActiveChannels');
        if (activeChannelsElement) activeChannelsElement.textContent = totalActiveChannels;
        
        const powerElement = document.getElementById('totalPowerConsumption');
        if (powerElement) powerElement.textContent = totalPower.toFixed(1) + 'W';
    }
    
    function addNewDeviceCard(deviceId) {
        const deviceGrid = document.getElementById('deviceGrid');
        const offlineButtonHtml = (userRole === 'Admin' || userRole === 'Maintenance') ? 
            `<button class="btn btn-outline-danger btn-sm" onclick="markDeviceOffline('${deviceId}')" 
                     id="offline-btn-${deviceId}">
                <i class="fas fa-power-off"></i> Mark Offline
             </button>` : '';
             
        const roleNoticeHtml = userRole === 'Operator' ? 
            `<div class="mt-2">
                <small class="text-muted">
                    <i class="fas fa-lock me-1"></i>View-only access
                </small>
             </div>` : '';
             
        const newCardHtml = `
            <div class="col-md-6 col-lg-4 mb-3" id="device-card-${deviceId}">
                <div class="card device-card h-100">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-microchip"></i> ${deviceId}
                            <span class="float-end">
                                <i class="fas fa-circle text-success" id="status-indicator-${deviceId}" title="Online"></i>
                            </span>
                        </h5>
                        <p class="card-text">
                            <span class="badge bg-success" id="status-${deviceId}">Online</span>
                            <span class="text-muted">Last update: <span id="lastUpdate-${deviceId}">--</span></span>
                        </p>
                        <div class="mt-3" id="deviceSummary-${deviceId}">
                            <div class="row text-center mb-2">
                                <div class="col-6">
                                    <div class="border-end">
                                        <div class="fs-6 fw-bold text-primary" id="activeChannels-${deviceId}">0</div>
                                        <small class="text-muted">Active Ch</small>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="fs-6 fw-bold text-success" id="totalPower-${deviceId}">0.0</div>
                                    <small class="text-muted">Total W</small>
                                </div>
                            </div>
                            <div class="row text-center">
                                <div class="col-4">
                                    <div class="small text-muted">
                                        <div id="alarmCount-${deviceId}">0</div>
                                        <small>Alarms</small>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="small text-muted">
                                        <div id="channelCount-${deviceId}">0</div>
                                        <small>Channels</small>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="small text-muted">
                                        <div id="heartbeat-${deviceId}">--</div>
                                        <small>Heartbeat</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <a href="/Home/Device/${deviceId}" class="btn btn-primary btn-sm">
                                <i class="fas fa-eye"></i> View Details
                            </a>
                            <a href="/Home/Monitoring/${deviceId}" class="btn btn-outline-secondary btn-sm">
                                <i class="fas fa-chart-line"></i> Real-time
                            </a>
                            ${offlineButtonHtml}
                        </div>
                        ${roleNoticeHtml}
                    </div>
                </div>
            </div>
        `;
        
        deviceGrid.insertAdjacentHTML('beforeend', newCardHtml);
    }
    
    // Mark device offline manually (only for Admin/Maintenance)
    function markDeviceOffline(deviceId) {
        if (userRole !== 'Admin' && userRole !== 'Maintenance') {
            alert('You do not have permission to perform this action.');
            return;
        }
        
        if (connection && isConnected) {
            connection.invoke("MarkDeviceOffline", deviceId, "Manual disconnect from UI");
        }
    }
    
    function initSignalR() {
        console.log("Initializing SignalR connection...");
        
        connection = new signalR.HubConnectionBuilder()
            .withUrl("/deviceHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start().then(function () {
            console.log("✅ SignalR Connected to overview page");
            updateConnectionStatus(true, "Connected to real-time data");
            
            // Request device list to get any active devices
            return connection.invoke("RequestDeviceList");
        }).catch(function (err) {
            console.error("❌ SignalR connection failed:", err);
            updateConnectionStatus(false, "Failed to connect: " + err.toString());
            
            // Retry connection after 3 seconds
            setTimeout(initSignalR, 3000);
        });

        // Listen for device data from any device
        connection.on("ReceiveDeviceData", function (deviceData) {
            console.log("📦 Received device data on overview page", deviceData);
            updateDeviceCard(deviceData);
        });
        
        // Listen for device list updates
        connection.on("ReceiveDeviceList", function (deviceList) {
            console.log("📋 Received device list", deviceList);
            
            // Handle device list with status
            if (Array.isArray(deviceList)) {
                deviceList.forEach(deviceInfo => {
                    const deviceId = deviceInfo.deviceId || deviceInfo.DeviceId || deviceInfo;
                    const isOnline = deviceInfo.isOnline !== undefined ? deviceInfo.isOnline : true;
                    
                    knownDevices.add(deviceId);
                    updateDeviceStatus(deviceId, isOnline);
                    
                    if (isOnline) {
                        connection.invoke("JoinDeviceGroup", deviceId);
                    }
                });
            }
            
            updateSummaryStats();
        });

        // Listen for device status changes
        connection.on("DeviceStatusChanged", function (statusMessage) {
            console.log("📡 Device status changed", statusMessage);
            const deviceId = statusMessage.deviceId || statusMessage.DeviceId;
            const isOnline = statusMessage.isOnline || statusMessage.IsOnline;
            
            if (deviceId) {
                knownDevices.add(deviceId);
                updateDeviceStatus(deviceId, isOnline);
                updateSummaryStats();
                
                // If device comes online, join its group
                if (isOnline) {
                    connection.invoke("JoinDeviceGroup", deviceId);
                }
            }
        });

        // Listen for device status summary
        connection.on("ReceiveDeviceStatusSummary", function (deviceStatusList) {
            console.log("📊 Received device status summary", deviceStatusList);
            
            deviceStatusList.forEach(deviceStatus => {
                const deviceId = deviceStatus.deviceId || deviceStatus.DeviceId;
                const isOnline = deviceStatus.isOnline || deviceStatus.IsOnline;
                
                if (deviceId) {
                    knownDevices.add(deviceId);
                    updateDeviceStatus(deviceId, isOnline);
                }
            });
            
            updateSummaryStats();
        });

        connection.onclose(function(error) {
            console.log("🔴 SignalR connection closed", error);
            updateConnectionStatus(false, "Connection lost. Attempting to reconnect...");
            
            // Reset all device statuses to offline
            knownDevices.forEach(deviceId => {
                updateDeviceStatus(deviceId, false);
            });
            updateSummaryStats();
            
            setTimeout(initSignalR, 3000);
        });
    }
    
    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
        console.log("🚀 Overview page loaded, initializing SignalR...");
        console.log(`👤 User role: ${userRole}`);
        initSignalR();
        
        // Add existing devices to known devices set
        @foreach (var deviceId in Model)
        {
            <text>knownDevices.add('@deviceId');</text>
        }
    });
    
    // Periodic device status refresh
    setInterval(function() {
        if (isConnected && connection) {
            connection.invoke("RequestDeviceList");
        }
    }, 10000); // Every 10 seconds
</script>
}