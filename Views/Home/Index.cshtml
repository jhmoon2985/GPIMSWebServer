@model List<string>
@{
    ViewData["Title"] = "Device Overview";
}

<div class="row">
    <div class="col-12">
        <h1 class="fs-4"><i class="fas fa-tachometer-alt"></i> Device Overview</h1>
        <p class="text-muted">Monitor all connected devices in real-time</p>
        
        <!-- Connection Status -->
        <div class="alert alert-info d-flex align-items-center" id="connectionStatus">
            <div class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></div>
            <span>Connecting to real-time data...</span>
        </div>
    </div>
</div>

<div class="row" id="deviceGrid">
    @if (Model.Any())
    {
        @foreach (var deviceId in Model)
        {
            <div class="col-md-6 col-lg-4 mb-3" id="device-card-@deviceId">
                <div class="card device-card h-100">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-microchip"></i> @deviceId
                        </h5>
                        <p class="card-text">
                            <span class="badge bg-secondary" id="status-@deviceId">Offline</span>
                            <span class="text-muted">Last update: <span id="lastUpdate-@deviceId">--</span></span>
                        </p>
                        <div class="mt-3" id="deviceSummary-@deviceId">
                            <div class="row text-center mb-2">
                                <div class="col-6">
                                    <div class="border-end">
                                        <div class="fs-6 fw-bold text-primary" id="activeChannels-@deviceId">0</div>
                                        <small class="text-muted">Active Ch</small>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="fs-6 fw-bold text-success" id="totalPower-@deviceId">0.0</div>
                                    <small class="text-muted">Total W</small>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <a href="/Home/Device/@deviceId" class="btn btn-primary btn-sm">
                                <i class="fas fa-eye"></i> View Details
                            </a>
                            <a href="/Home/Monitoring/@deviceId" class="btn btn-outline-secondary btn-sm">
                                <i class="fas fa-chart-line"></i> Real-time
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="alert alert-info" id="noDevicesAlert">
                <i class="fas fa-info-circle"></i> No devices connected. Waiting for device data...
            </div>
        </div>
    }
</div>

@section Scripts {
<script>
    let connection;
    let isConnected = false;
    let connectedDevices = new Set();
    
    function updateConnectionStatus(connected, message) {
        isConnected = connected;
        const statusElement = document.getElementById('connectionStatus');
        
        if (connected) {
            statusElement.className = 'alert alert-success d-flex align-items-center';
            statusElement.innerHTML = `
                <i class="fas fa-check-circle me-2"></i>
                <span>${message}</span>
            `;
        } else {
            statusElement.className = 'alert alert-danger d-flex align-items-center';
            statusElement.innerHTML = `
                <i class="fas fa-exclamation-triangle me-2"></i>
                <span>${message}</span>
            `;
        }
    }
    
    function updateDeviceCard(deviceData) {
        const deviceId = deviceData.deviceId || deviceData.DeviceId;
        if (!deviceId) return;
        
        console.log(`Updating device card for ${deviceId}`, deviceData);
        
        // Mark device as connected
        connectedDevices.add(deviceId);
        
        // Update status badge
        const statusElement = document.getElementById(`status-${deviceId}`);
        if (statusElement) {
            statusElement.className = 'badge bg-success';
            statusElement.textContent = 'Online';
        }
        
        // Update last update time
        const lastUpdateElement = document.getElementById(`lastUpdate-${deviceId}`);
        if (lastUpdateElement) {
            const timestamp = deviceData.timestamp || deviceData.Timestamp || new Date().toISOString();
            lastUpdateElement.textContent = new Date(timestamp).toLocaleTimeString();
        }
        
        // Update device summary
        const channels = deviceData.channels || deviceData.Channels || [];
        
        // Active channels count
        const activeChannelsElement = document.getElementById(`activeChannels-${deviceId}`);
        if (activeChannelsElement) {
            const activeCount = channels.filter(ch => {
                const status = ch.status !== undefined ? ch.status : (ch.Status !== undefined ? ch.Status : 0);
                return status !== 0; // Not Idle
            }).length;
            activeChannelsElement.textContent = activeCount;
        }
        
        // Total power
        const totalPowerElement = document.getElementById(`totalPower-${deviceId}`);
        if (totalPowerElement) {
            const totalPower = channels.reduce((sum, ch) => {
                const power = ch.power || ch.Power || 0;
                return sum + parseFloat(power);
            }, 0);
            totalPowerElement.textContent = totalPower.toFixed(1);
        }
        
        // If this is a new device not in the static list, add it dynamically
        if (!document.getElementById(`device-card-${deviceId}`)) {
            addNewDeviceCard(deviceId);
        }
        
        // Hide "no devices" alert if it exists
        const noDevicesAlert = document.getElementById('noDevicesAlert');
        if (noDevicesAlert && connectedDevices.size > 0) {
            noDevicesAlert.style.display = 'none';
        }
    }
    
    function addNewDeviceCard(deviceId) {
        const deviceGrid = document.getElementById('deviceGrid');
        const newCardHtml = `
            <div class="col-md-6 col-lg-4 mb-3" id="device-card-${deviceId}">
                <div class="card device-card h-100">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-microchip"></i> ${deviceId}
                        </h5>
                        <p class="card-text">
                            <span class="badge bg-success" id="status-${deviceId}">Online</span>
                            <span class="text-muted">Last update: <span id="lastUpdate-${deviceId}">--</span></span>
                        </p>
                        <div class="mt-3" id="deviceSummary-${deviceId}">
                            <div class="row text-center mb-2">
                                <div class="col-6">
                                    <div class="border-end">
                                        <div class="fs-6 fw-bold text-primary" id="activeChannels-${deviceId}">0</div>
                                        <small class="text-muted">Active Ch</small>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="fs-6 fw-bold text-success" id="totalPower-${deviceId}">0.0</div>
                                    <small class="text-muted">Total W</small>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <a href="/Home/Device/${deviceId}" class="btn btn-primary btn-sm">
                                <i class="fas fa-eye"></i> View Details
                            </a>
                            <a href="/Home/Monitoring/${deviceId}" class="btn btn-outline-secondary btn-sm">
                                <i class="fas fa-chart-line"></i> Real-time
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        deviceGrid.insertAdjacentHTML('beforeend', newCardHtml);
    }
    
    function initSignalR() {
        console.log("Initializing SignalR connection...");
        
        connection = new signalR.HubConnectionBuilder()
            .withUrl("/deviceHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start().then(function () {
            console.log("✅ SignalR Connected to overview page");
            updateConnectionStatus(true, "Connected to real-time data");
            
            // Request device list to get any active devices
            return connection.invoke("RequestDeviceList");
        }).catch(function (err) {
            console.error("❌ SignalR connection failed:", err);
            updateConnectionStatus(false, "Failed to connect: " + err.toString());
            
            // Retry connection after 3 seconds
            setTimeout(initSignalR, 3000);
        });

        // Listen for device data from any device
        connection.on("ReceiveDeviceData", function (deviceData) {
            console.log("📦 Received device data on overview page", deviceData);
            updateDeviceCard(deviceData);
        });
        
        // Listen for device list updates
        connection.on("ReceiveDeviceList", function (deviceList) {
            console.log("📋 Received device list", deviceList);
            // Join groups for all active devices
            deviceList.forEach(deviceId => {
                connection.invoke("JoinDeviceGroup", deviceId);
            });
        });

        connection.onclose(function(error) {
            console.log("🔴 SignalR connection closed", error);
            updateConnectionStatus(false, "Connection lost. Attempting to reconnect...");
            
            // Reset device statuses
            connectedDevices.forEach(deviceId => {
                const statusElement = document.getElementById(`status-${deviceId}`);
                if (statusElement) {
                    statusElement.className = 'badge bg-secondary';
                    statusElement.textContent = 'Offline';
                }
            });
            
            setTimeout(initSignalR, 3000);
        });
    }
    
    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
        console.log("🚀 Overview page loaded, initializing SignalR...");
        initSignalR();
        
        // Join groups for existing devices
        @foreach (var deviceId in Model)
        {
            <text>connectedDevices.add('@deviceId');</text>
        }
    });
    
    // Periodic device list refresh
    setInterval(function() {
        if (isConnected && connection) {
            connection.invoke("RequestDeviceList");
        }
    }, 5000); // Every 5 seconds
</script>
}